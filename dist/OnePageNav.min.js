/**
 * @options
 * @param {string} navLinksSelector - selector targeting anchor tags
 * @param {string} navLinkActiveClass - class name that will be added on navigation link when section reached and alternatively on parents passes inside parentsObtainingActiveClass
 * @param {string} sectionActiveClass - class name that will be added on section when reached
 * @param {string} defaultActiveElement - selector to element(e.g. `<a>` tag), which obtain class active, if none section was reached (or active if exact match option is used)
 * @param {int} changeOffset - the distance from the top of the page that the next element must be scrolled to in order to be activated. Value given in precents (0-100)% - default (50)
 * @param {boolean} defaultLinkActive - indicates whether first link element should be set as active. May be combined with exactMatch option and/or defaultActiveElement, to set another element instead of first link in array
 * @param {boolean} updateATagClass - determines if class should be added to `<a>` tag
 * @param {boolean} setClassesOnSections - if true, reached section becomes active class
 * @param {boolean} exactMatch - set class only if offset is located between begin and end of section, else change to undefined
 * @param {boolean} updateHash - update hash accordingly to section
 * @param {boolean} saveHashBetweenSections - hash won't change if there's a gap between sections - has only impact if exactMatch option is active
 * @param {array} parentsObtainingActiveClass - array of selectors for closest parent elements, where class 'active' should be added or removed when section changes
 * @param {array} onInit - array with functions, that should be fired after script was fully initialized e.g. `onInit: [function1, function2]`, callback receives whole onePageNav object.
 * @param {array} onChange - array with functions, that should be fired on change e.g. `onChange: [function1, function2]`, callback receives whole onePageNav object.
 * @param {boolean} debugLine - show debug line
 *
 * @link More about script - https://github.com/Matheoz-sys/PureJS_onePageNav/wiki/About
 *
 * @copyright Copyright (c) 2023 Mateusz Żołdak
 * @license licensed under MIT license
 */
class t{previousSection;currentSection;sections;options;elementDefaultActive;newlyInitialized;navLinks;debugLine;defaults={navLinksSelector:"nav a",defaultLinkActive:!0,updateATagClass:!0,changeOffset:50,parentsObtainingActiveClass:[],setClassesOnSections:!1,exactMatch:!1,navLinkActiveClass:"active",sectionActiveClass:"active",defaultActiveElement:void 0,updateHash:!1,saveHashBetweenSections:!0,onInit:[],onChange:[],debugLine:!1};constructor(t){this.options={...this.defaults,...t},console.log(this.options),this.initialize()}set=(t,e)=>{this.options[t]=e,this.refresh()};refresh=()=>{this.newlyInitialized=!0,this.initialize()};initialize=()=>{this.findLinks(),this.navLinks?(this.findRelatedSections(),this.sections||console.debug("No sections found"),this.findElementDefaultActive(),this.handleDebugLine(),this.handleScrollListener(),this.handleOutput(),this.handleOnInitCallbacks()):console.debug("The selector did not match any elements - `"+this.options.navLinksSelector+"`")};findLinks=()=>{this.navLinks=[...document.querySelectorAll(this.options.navLinksSelector)]};findRelatedSections=()=>{let t=this.navLinks.map((t=>t.hash)).filter((t=>t));this.sections=[...document.querySelectorAll(t.join(", "))]};handleScrollListener=()=>{window.removeEventListener("scroll",this.handleOutput),window.addEventListener("scroll",this.handleOutput)};handleOutput=()=>{if(this.updateCurrentSection(this.findCurrentSection()),i.hasChanged(this)||this.newlyInitialized){if(this.newlyInitialized=!1,this.clearClasses(),this.handleDefaultLinkActive(),this.handleHash(),i.noneActive(this)||this.handleOnChangeCallbacks(),i.noneActive(this))return;this.handleSectionClasses(),this.addActiveClassesOnNavigationLinks(),this.handleOnChangeCallbacks()}};firstSectionAbove=()=>this.sections.filter((t=>e.belowSectionOffsetTop(this,t))).at(-1);findCurrentSection=()=>this.options.exactMatch?this.sections.filter((t=>e.exactlyInsideSection(this,t))).at(-1):this.firstSectionAbove();updateCurrentSection=t=>{this.previousSection=this.currentSection,this.currentSection=t??this.handleDefaultLinkActive()};clearClasses=()=>{this.navLinks.forEach((t=>{this.removeActiveClass(t)})),this.sections.forEach((t=>{t.classList.remove(this.options.sectionActiveClass)}))};handleDefaultLinkActive=()=>{i.noneActive(this)&&this.options.defaultLinkActive&&this.addActiveClass(this.elementDefaultActive??this.navLinks[0])};handleHash=()=>{if(this.options.updateHash)if(this.options.exactMatch&&i.noneActive(this)&&this.options.saveHashBetweenSections&&e.passedBeginningOfFirstSection(this)){let t=this.firstSectionAbove();history.replaceState(null,"",t?"#"+t.id:" ")}else history.replaceState(null,"",this.currentSection?"#"+this.currentSection.id:" ")};handleSectionClasses=()=>{this.options.setClassesOnSections&&this.currentSection&&this.currentSection.classList.add(this.options.sectionActiveClass)};addActiveClassesOnNavigationLinks=()=>{if(!this.currentSection)return;this.allLinksIncludingHash(this.navLinks,this.currentSection.id).forEach((t=>this.addActiveClass(t)))};allLinksIncludingHash=(t,e)=>t.filter((t=>t.hash==`#${e}`));addActiveClass=t=>{this.options.updateATagClass&&t.classList.add(this.options.navLinkActiveClass),this.options.parentsObtainingActiveClass.forEach((e=>{t.closest(e)?.classList.add(this.options.navLinkActiveClass)}))};removeActiveClass=t=>{this.options.updateATagClass&&t.classList.remove(this.options.navLinkActiveClass),this.options.parentsObtainingActiveClass.forEach((e=>{t.closest(e)?.classList.remove(this.options.navLinkActiveClass)}))};findElementDefaultActive=()=>{this.options.defaultActiveElement?this.elementDefaultActive=document.querySelector(this.options.defaultActiveElement):(this.elementDefaultActive=void 0,console.debug("Default active element not found."))};handleOnInitCallbacks=()=>{this.options.onChange?.forEach((t=>{t(this)}))};handleOnChangeCallbacks=()=>{this.options.onChange?.forEach((t=>{t(this)}))};handleDebugLine=()=>{this.debugLine||(this.debugLine=new s(this)),this.debugLine.update(this.options)}}class e{static position=({changeOffset:t})=>window.scrollY+window.innerHeight/(100/t);static belowSection=(t,e)=>!!i.exist(e)&&this.position(t.options)>this.posYFromPageTop(e)+e.offsetHeight;static belowSectionOffsetTop=(t,e)=>!!i.exist(e)&&this.position(t.options)>this.posYFromPageTop(e);static aboveSection=(t,e)=>!!i.exist(e)&&this.position(t.options)<this.posYFromPageTop(e);static aboveSectionOffsetBottom=(t,e)=>!!i.exist(e)&&this.position(t.options)<this.posYFromPageTop(e)+e.offsetHeight;static passedBeginningOfFirstSection=t=>this.position(t.options)>t.sections.at(0).getBoundingClientRect().top+document.documentElement.scrollTop;static exactlyInsideSection=(t,e)=>this.belowSectionOffsetTop(t,e)&&this.aboveSectionOffsetBottom(t,e);static posYFromPageTop=t=>t.getBoundingClientRect().top+document.documentElement.scrollTop}class i{static exist=t=>!!t;static hasChanged=({currentSection:t,previousSection:e})=>t!=e;static noneActive=({currentSection:t})=>null==t}class s{debugLine;constructor(t){this.update(t.options)}update({debugLine:t,changeOffset:e}){t?this.debugLine?this.updateOffset(e):this.create():this.remove()}updateOffset=t=>{this.debugLine.style.top=`calc(${t}% - 2px)`};create=()=>{this.debugLine=document.createElement("div"),this.debugLine.classList.add("debugLine"),this.debugLine.setAttribute("style","position: fixed;width: 100%;background: #ff00007a;height: 4px;transition: .6s; top:50%;"),document.body.appendChild(this.debugLine)};remove=()=>{this.debugLine&&this.debugLine.remove()}}export{e as Offset,i as Section,t as default};
